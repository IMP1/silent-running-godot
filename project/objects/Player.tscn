[gd_scene load_steps=16 format=2]

[ext_resource path="res://sprites/sub.png" type="Texture" id=1]
[ext_resource path="res://objects/Player.gd" type="Script" id=2]
[ext_resource path="res://audio/impact.ogg" type="AudioStream" id=3]
[ext_resource path="res://sprites/torpedo.png" type="Texture" id=4]
[ext_resource path="res://sprites/mine_skull.png" type="Texture" id=5]
[ext_resource path="res://sprites/mine_sound.png" type="Texture" id=6]
[ext_resource path="res://sprites/mine_stun.png" type="Texture" id=7]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float progress = 0.5;

void fragment() {
	COLOR = texture(TEXTURE, UV);
	if (progress <= UV.x) {
		COLOR *= 0.5;
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/progress = 0.5

[sub_resource type="StyleBoxFlat" id=3]
bg_color = Color( 0, 0, 0, 1 )
border_width_left = 2
border_width_top = 2
border_width_right = 2
border_width_bottom = 2

[sub_resource type="StyleBoxFlat" id=4]
draw_center = false
border_width_left = 2
border_width_top = 2
border_width_right = 2
border_width_bottom = 2
border_color = Color( 1, 1, 1, 1 )
expand_margin_left = 1.0
expand_margin_right = 1.0
expand_margin_top = 1.0
expand_margin_bottom = 1.0
shadow_color = Color( 1, 1, 1, 0.6 )
shadow_size = 1

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

const float range = 0.05;
const float noiseQuality = 250.0;
const float noiseIntensity = 0.0088;
const float offsetIntensity = 0.02;
const float colorOffsetIntensity = 1.3;

float rand(vec2 co) {
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float verticalBar(float pos, float uvY, float offset) {
    float edge0 = (pos - range);
    float edge1 = (pos + range);

    float x = smoothstep(edge0, pos, uvY) * offset;
    x -= smoothstep(pos, edge1, uvY) * offset;
    return x;
}

void fragment() {
    vec2 uv = SCREEN_UV;
    
    for (float i = 0.0; i < 0.71; i += 0.1313)
    {
        float d = mod(TIME * i, 1.7);
       	float o = sin(1.0 - tan(TIME * 0.24 * i));
    	o *= offsetIntensity;
        uv.x += verticalBar(d, uv.y, o);
    }
    
    float uvY = uv.y;
    uvY *= noiseQuality;
    uvY = float(int(uvY)) * (1.0 / noiseQuality);
    float noise = rand(vec2(TIME * 0.00001, uvY));
    uv.x += noise * noiseIntensity;

    vec2 offsetR = vec2(0.006 * sin(TIME), 0.0) * colorOffsetIntensity;
    vec2 offsetG = vec2(0.0073 * (cos(TIME * 0.97)), 0.0) * colorOffsetIntensity;
    
    float r = texture(SCREEN_TEXTURE, uv + offsetR).r;
    float g = texture(SCREEN_TEXTURE, uv + offsetG).g;
    float b = texture(SCREEN_TEXTURE, uv).b;

    vec4 tex = vec4(r, g, b, 1.0);
    COLOR  = tex;
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )

[sub_resource type="OpenSimplexNoise" id=7]

[sub_resource type="NoiseTexture" id=8]
noise = SubResource( 7 )

[node name="Player" type="KinematicBody2D"]
collision_layer = 2
collision_mask = 15
script = ExtResource( 2 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="."]
scale = Vector2( 0.2, 0.2 )
polygon = PoolVector2Array( -25, -35, -5, -35, -5, -70, 20, -70, 20, -30, 40, -20, 40, 15, 125, 15, 150, 30, 150, 60, 130, 70, -75, 70, -125, 55, -135, 65, -150, 65, -150, 15, -135, 15, -130, 35, -70, 20, -25, 15 )

[node name="Sprite" type="Sprite" parent="."]
modulate = Color( 0, 0, 0, 1 )
scale = Vector2( 0.2, 0.2 )
texture = ExtResource( 1 )

[node name="Tween" type="Tween" parent="."]

[node name="PassivePingTimer" type="Timer" parent="."]

[node name="ActivePingTimer" type="Timer" parent="."]
wait_time = 0.5
one_shot = true

[node name="TorpedoTimer" type="Timer" parent="."]
wait_time = 2.0
one_shot = true

[node name="StunTimer" type="Timer" parent="."]

[node name="DamageAudio" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource( 3 )
bus = "Sounds"

[node name="HUD" type="CanvasLayer" parent="."]

[node name="GUI" type="Control" parent="HUD"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2

[node name="ColorRect" type="ColorRect" parent="HUD/GUI"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -132.5
margin_top = 24.0
margin_right = 132.5
margin_bottom = 48.0

[node name="HealthBar" type="ColorRect" parent="HUD/GUI"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -130.5
margin_top = 26.0
margin_right = 130.5
margin_bottom = 46.0
color = Color( 0, 0, 0, 1 )

[node name="Health" type="ColorRect" parent="HUD/GUI/HealthBar"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 2.0
margin_top = 2.0
margin_right = -2.0
margin_bottom = -2.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TubeProgress" type="TextureRect" parent="HUD/GUI"]
material = SubResource( 2 )
anchor_top = 1.0
anchor_bottom = 1.0
margin_top = -62.0
margin_right = 118.0
texture = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Utilities" type="HBoxContainer" parent="HUD/GUI"]
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -512.0
margin_top = -60.0
margin_right = 512.0
margin_bottom = -8.0
grow_horizontal = 2
alignment = 1

[node name="Prev" type="Label" parent="HUD/GUI/Utilities"]
margin_left = 414.0
margin_top = 19.0
margin_right = 422.0
margin_bottom = 33.0
text = "<"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="List" type="HBoxContainer" parent="HUD/GUI/Utilities"]
margin_left = 426.0
margin_right = 598.0
margin_bottom = 52.0
grow_horizontal = 2
grow_vertical = 2
custom_constants/separation = 8
alignment = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ExplosiveMine" type="PanelContainer" parent="HUD/GUI/Utilities/List"]
margin_right = 52.0
margin_bottom = 52.0
grow_horizontal = 2
grow_vertical = 2
custom_styles/panel = SubResource( 3 )

[node name="TextureRect" type="TextureRect" parent="HUD/GUI/Utilities/List/ExplosiveMine"]
margin_left = 2.0
margin_top = 2.0
margin_right = 50.0
margin_bottom = 50.0
rect_min_size = Vector2( 48, 48 )
texture = ExtResource( 5 )
expand = true
stretch_mode = 5

[node name="DecoyMine" type="PanelContainer" parent="HUD/GUI/Utilities/List"]
margin_left = 60.0
margin_right = 112.0
margin_bottom = 52.0
grow_horizontal = 2
grow_vertical = 2
custom_styles/panel = SubResource( 3 )

[node name="TextureRect" type="TextureRect" parent="HUD/GUI/Utilities/List/DecoyMine"]
margin_left = 2.0
margin_top = 2.0
margin_right = 50.0
margin_bottom = 50.0
rect_min_size = Vector2( 48, 48 )
texture = ExtResource( 6 )
expand = true
stretch_mode = 5

[node name="StunMine" type="PanelContainer" parent="HUD/GUI/Utilities/List"]
margin_left = 120.0
margin_right = 172.0
margin_bottom = 52.0
grow_horizontal = 2
grow_vertical = 2
custom_styles/panel = SubResource( 3 )

[node name="TextureRect" type="TextureRect" parent="HUD/GUI/Utilities/List/StunMine"]
margin_left = 2.0
margin_top = 2.0
margin_right = 50.0
margin_bottom = 50.0
rect_min_size = Vector2( 48, 48 )
texture = ExtResource( 7 )
expand = true
stretch_mode = 5

[node name="Next" type="Label" parent="HUD/GUI/Utilities"]
margin_left = 602.0
margin_top = 19.0
margin_right = 610.0
margin_bottom = 33.0
text = ">"

[node name="Control" type="Control" parent="HUD/GUI"]
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -512.0
margin_right = 512.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TextureRect" type="ColorRect" parent="HUD/GUI/Control"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -86.0
margin_top = -60.0
margin_right = -34.0
margin_bottom = -8.0
color = Color( 0, 0, 0, 0.627451 )

[node name="TextureRect2" type="ColorRect" parent="HUD/GUI/Control"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = 34.0
margin_top = -60.0
margin_right = 86.0
margin_bottom = -8.0
color = Color( 0, 0, 0, 0.627451 )

[node name="TextureRect3" type="Panel" parent="HUD/GUI/Control"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -27.0
margin_top = -61.0
margin_right = 27.0
margin_bottom = -7.0
custom_styles/panel = SubResource( 4 )

[node name="StunShader" type="TextureRect" parent="HUD"]
visible = false
material = SubResource( 6 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = SubResource( 8 )
expand = true

[connection signal="timeout" from="PassivePingTimer" to="." method="_on_PassivePingTimer"]
